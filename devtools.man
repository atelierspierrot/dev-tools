.\" author: Les Ateliers Pierrot

.TH  "Dev Tools" "3" "2013-10-20" "Version 1.0.7" "devtools.sh Manual"

.SH NAME

.PP
devtools - Packages development & deployment facilities

.SH SYNOPSIS

.PP
\fBdevtools.sh action [common options] [script options [=value]] --\fP

.PP
\fBdevtools.sh\fP  <action>  [\fB-h\fP|\fB--help\fP|\fB-V\fP]  [\fB-f\fP|\fB-i\fP|\fB-q\fP|\fB-v\fP]  [\fB-x\fP|\fB--dry-run\fP]  [\fB-p | --project\fP \fI=path\fP]  ...
    ... cleanup
    ... config  [\fB--var\fP \fI=name\fP]  [\fB--val\fP \fI=value\fP]  [\fB--filename\fP]  [\fB--full\fP] 
    ... deploy  [\fB--env\fP \fI=env\fP] 
    ... extract  [\fB--begin\fP \fI=mask\fP]  [\fB--end\fP \fI=mask\fP]  [\fB--output\fP \fI=filename\fP]  [\fB--filename\fP] 
    ... fix-rights  [\fB--files\fP \fI=chmod\fP]  [\fB--dirs\fP \fI=chmod\fP]  [\fB--bin\fP \fI=path\fP]  [\fB--bin-mask\fP \fI=mask\fP] 
    ... md2man  [\fB--source\fP \fI=path\fP]  [\fB--filename\fP \fI=filename\fP]  [\fB--markdown\fP \fI=bin path\fP]
    ... manpage  [\fB--source\fP \fI=path\fP]  [\fB--filename\fP \fI=filename\fP]  [\fB--type\fP \fI=type\fP]  [\fB--dir\fP \fI=dir path\fP]  [\fB--markdown\fP \fI=bin path\fP]  [\fB--whatis\fP \fI=bin path\fP]  [\fB--makewhatis\fP \fI=bin path\fP] 
    ... sync  [\fB--env\fP \fI=env\fP]  [\fB--target\fP \fI=server\fP]  [\fB--options\fP \fI="rsync options"\fP] 
    ... version-tag  [\fB--name\fP \fI=version\fP]  [\fB--branch\fP \fI=name\fP]  [\fB--hook\fP \fI=path\fP]  [\fB--no-hook\fP] 
    --

.SH DESCRIPTION

.PP
The `\fSdevtools\fP` is one single shell script that handles a set of available actions
(defined themselves as shell scripts) to execute something upon a package in development. The usage is
quite simple as it just requires to understand the command line call of one single script.
The global script always follows the same rules and acts like a dispatcher that distributes the
options to an action. More, creating a new action (such as your own actions) is as simple
as writing a new shell script in the `\fSdevtools-actions/\fP` directory and call it with the global
script. The global synopsis usage of the script is something like:
.RS

.EX
devtools action-name [common options] [script options [=value]] --
.EE
.RE

.PP
Run option `\fSaction -h\fP` to see the help about a specific action and use option `\fS--dry-run\fP` to make dry runs.

.PP
This package is based on the <Bash Library>.

.SH OPTIONS

.PP
\fIThe following common options are supported:\fP
.TP
\fB-p | --project\fP =path
define the project directory path (default is `\fSpwd\fP` - `\fSPATH\fP` must exist)
.TP
\fB-h | --help\fP
show this information message 
.TP
\fB-v | --verbose\fP
increase script verbosity 
.TP
\fB-q | --quiet\fP
decrease script verbosity, nothing will be written unless errors 
.TP
\fB-f | --force\fP
force some commands to not prompt confirmation 
.TP
\fB-i | --interactive\fP
ask for confirmation before any action 
.TP
\fB-x | --debug | --dry-run\fP
see commands to run but do not run them actually
.PP
You can group short options like `\fS-xc\fP`, set an option argument like `\fS-d(=)value\fP` or
`\fS--long=value\fP` and use `\fS--\fP` to explicitly specify the end of the script options.

.PP
\fIThe following actions are currently available:\fP

.RS
.IP \fBCleanup\fP

.PP
This will clean (remove) all OS or IDE specific files from the project
(configuration variable: `\fSDEFAULT_CLEANUP_NAMES\fP`).

.PP
devtools.sh  \fBcleanup\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]  --

.RE
.RS
.IP \fBConfig\fP

.PP
Manage the devtools configuration for a package, stored in `\fS.devtools\fP` dotfile ;
with no option, current configuration will be shown.

.PP
devtools.sh  \fBconfig\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--var\fP \fI=name\fP]  [\fB--val\fP \fI=value\fP]  [\fB--filename\fP]  [\fB--full\fP]  --
.TP
\fB--var\fP =name
select a configuration variable to read or define
.TP
\fB--val\fP =value
define a configuration variable value (requires the `\fS--var\fP` option to be defined)
.TP
\fB--filename\fP
see current configuration file path for the project
.TP
\fB--full\fP
see the full configuration entries for the project (defaults and custom)
.RE
.RS
.IP \fBDeploy\fP

.PP
Will search for files suffixed by `\fS__ENV__\fP` in the project path (recursively) and
over-write the original ones (without suffix).

.PP
devtools.sh  \fBdeploy\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--env\fP \fI=env\fP]  --
.TP
\fB--env\fP =name
the environment shortcut to deploy (default is `\fSDEFAULT\fP` - configuration variable: `\fSDEFAULT_DEPLOY_ENV\fP`)
.RE
.RS
.IP \fBExtract\fP

.PP
Will search and extract strings from files contents recursively ; result is written on STDOUT
but can be stored in a file.

.PP
devtools.sh  \fBextract\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--begin\fP \fI=mask\fP]  [\fB--end\fP \fI=mask\fP]  [\fB--output\fP \fI=filename\fP]
    [\fB--filename\fP]  --
.TP
\fB--begin\fP =mask
the mask to use to begin the matching (configuration variable: `\fSDEFAULT_EXTRACT_BEGIN_MASK\fP`) 
.TP
\fB--end\fP =mask
the mask to use to end the matching (configuration variable: `\fSDEFAULT_EXTRACT_END_MASK\fP`) 
.TP
\fB--output\fP =filename
a filename to write results in (this will overwrite any existing file)
.TP
\fB--show-filename\fP
write matching filenames before extracted content (configuration variable: `\fSDEFAULT_EXTRACT_SHOW_FILENAME\fP`)
.RE
.RS
.IP \fBFix-rights\fP

.PP
This will fix files and directories UNIX rights recursively on the project.

.PP
devtools.sh  \fBfix-rights\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--files\fP \fI=chmod\fP]  [\fB--dirs\fP \fI=chmod\fP]  [\fB--bin\fP \fI=path\fP]
    [\fB--bin-mask\fP \fI=mask\fP]  --
.TP
\fB--dirs\fP =chmod
the rights level setted for directories (default is `\fS0755\fP` - configuration variable: `\fSDEFAULT_FIXRIGHTS_DIRS_CHMOD\fP`) 
.TP
\fB--files\fP =chmod
the rights level setted for files (default is `\fS0644\fP` - configuration variable: `\fSDEFAULT_FIXRIGHTS_FILES_CHMOD\fP`) 
.TP
\fB--bin\fP =path
directory name of the binaries, to define their rights on `\fSa+x\fP` (default is `\fSbin/\fP` - configuration variable: `\fSDEFAULT_FIXRIGHTS_BIN_DIR\fP`)
.TP
\fB--bin-mask\fP =mask
mask to match binary files in 'bin' (default is empty - configuration variable: `\fSDEFAULT_FIXRIGHTS_BIN_MASK\fP`)
.RE
.RS
.IP \fBMd2man\fP

.PP
Build a manpage file based on a markdown content.

.PP
devtools.sh  \fBmanpage\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--source\fP \fI=path\fP]  [\fB--filename\fP \fI=filename\fP]  [\fB--markdown\fP \fI=bin\fP]  --
.TP
\fB--source\fP =filename
the manpage source file (default is `\fSMANPAGE.md\fP` - configuration variable: `\fSDEFAULT_MANPAGE_SOURCE\fP`) 
.TP
\fB--filename\fP =filename
the filename to use to create the manpage (configuration variable: `\fSDEFAULT_MANPAGE_FILENAME\fP`) 
.TP
\fB--markdown\fP =bin path
the binary to use for the 'markdown' command 
(default is installed MarkdownExtended package - configuration variable: `\fSDEFAULT_MANPAGE_MARKDOWN_BIN\fP`)
.RE
.RS
.IP \fBManpage\fP

.PP
Build a manpage file based on a markdown content ; the manpage is added in system manpages
and can be referenced if the `\fSwhatis\fP` and `\fSmakewhatis\fP` binaries are found or defined.

.PP
devtools.sh  \fBmanpage\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--source\fP \fI=path\fP]  [\fB--filename\fP \fI=filename\fP]  [\fB--type\fP \fI=type\fP]  [\fB--dir\fP \fI=path\fP]
    [\fB--markdown\fP \fI=bin\fP]  [\fB--whatis\fP \fI=bin\fP]  [\fB--makewhatis\fP \fI=bin\fP]  --
.TP
\fB--source\fP =filename
the manpage source file (default is `\fSMANPAGE.md\fP` - configuration variable: `\fSDEFAULT_MANPAGE_SOURCE\fP`) 
.TP
\fB--filename\fP =filename
the filename to use to create the manpage (configuration variable: `\fSDEFAULT_MANPAGE_FILENAME\fP`) 
.TP
\fB--section\fP =reference
the manpage section (default is '3' - configuration variable: `\fSDEFAULT_MANPAGE_SECTION\fP`) 
.TP
\fB--dir\fP =name
the manpage system directory to install manpage in 
.TP
\fB--markdown\fP =bin path
the binary to use for the 'markdown' command 
(default is installed MarkdownExtended package - configuration variable: `\fSDEFAULT_MANPAGE_MARKDOWN_BIN\fP`) 
.TP
\fB--whatis\fP =bin path
the binary to use for the 'whatis' command (configuration variable: `\fSDEFAULT_MANPAGE_WHATIS_BIN\fP`) 
.TP
\fB--makewhatis\fP =bin path
the binary to use for the 'makewhatis' command (configuration variable: `\fSDEFAULT_MANPAGE_MAKEWHATIS_BIN\fP`)
.RE
.RS
.IP \fBSync\fP

.PP
Will `\fSrsync\fP` a project directory to a target, which can use SSH protocol if so ; use the
`\fS-x\fP` option to process a `\fS--dry-run\fP` rsync.

.PP
devtools.sh  \fBsync\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--env\fP \fI=env\fP]  [\fB--target\fP \fI=server\fP]  [\fB--options\fP \fI="rsync options"\fP]  --
.TP
\fB--target\fP =server
the server name to use for synchronization (configuration variable: `\fSDEFAULT_SYNC_SERVER\fP`) 
.TP
\fB--options\fP ="rsync opts"
an options string used for the 'rsync' command (configuration variable: `\fSDEFAULT_SYNC_RSYNC_OPTIONS\fP`) 
.TP
\fB--env\fP =env
the environment shortcut to deploy if so (configuration variable: `\fSDEFAULT_SYNC_ENV\fP`)
.RE
.RS
.IP \fBVersion-tag\fP

.PP
This will create a new GIT version TAG according to the semantic versioning (see <http://semver.org/>).

.PP
devtools.sh  \fBversion-tag\fP  -[\fIcommon options\fP ...]  [\fB--dry-run\fP]
    [\fB--name\fP \fI=version\fP]  [\fB--branch\fP \fI=name\fP]  [\fB--hook\fP \fI=path\fP]  [\fB--no-hook\fP]  --
.TP
\fB--name\fP =version
the name of the new tag ; default will be next increased version number 
.TP
\fB--branch\fP =name
which branch to use (default is `\fSmaster\fP` - configuration variable: `\fSDEFAULT_VERSIONTAG_BRANCH\fP`)
.TP
\fB--hook\fP =path
define a pre-tag hook file (configuration variable: `\fSDEFAULT_VERSIONTAG_HOOK\fP` - see `\fSpre-tag-hook.sample\fP`)
.TP
\fB--no-hook\fP
do not run any pre-tag hook file (disable config setting)
.RS
.RS
.RS
.SH ENVIRONMENT

.PP
The script doesn't really define environment variables but handles a set of configuration
variables that can be overwritten or modified to fit your needs and special environment.
If you want to define a configuration value globally, edit the `\fSdevtools.conf\fP` file directly,
which is loaded at any call of the script. You can also define "per project" configuration
settings creating a `\fS.devtools\fP` file at the root of the project. The `\fSconfig\fP` action of
the script can help you to manage this type of configuration.

.PP
\fIThe following configuration variables are available:\fP
.TP
DEFAULT_CLEANUP_NAMES
list of file names or masks to remove when cleaning a project
.TP
DEFAULT_DEPLOY_ENV
default environment name to deploy when using action `\fSdeploy\fP`
.TP
DEFAULT_EXTRACT_BEGIN_MASK DEFAULT_EXTRACT_END_MASK
the default masks to begin and end file contents extraction when using action `\fSextract\fP`
.TP
DEFAULT_EXTRACT_SHOW_FILENAME
whether to show source filename before contents extracted when using action `\fSextract\fP`
.TP
DEFAULT_FIXRIGHTS_BIN_DIR
the default binaries path in the project when using action `\fSfix-rights\fP`
.TP
DEFAULT_FIXRIGHTS_BIN_MASK
the default mask to match binary files when using action `\fSfix-rights\fP`
.TP
DEFAULT_FIXRIGHTS_FILES_CHMOD DEFAULT_FIXRIGHTS_DIRS_CHMOD
default rights levels to use on files and directories when using action `\fSfix-rights\fP`
.TP
DEFAULT_MANPAGE_SOURCE DEFAULT_MANPAGE_FILENAME
default source and target file names when using action `\fSmanpage\fP`
.TP
DEFAULT_MANPAGE_SECTION
default system manpage type to use when using action `\fSmanpage\fP`
.TP
DEFAULT_MANPAGE_WHATIS_BIN DEFAULT_MANPAGE_MAKEWHATIS_BIN DEFAULT_MANPAGE_MARKDOWN_BIN
path of the binaries to use for the `\fSwhatis\fP`, `\fSmakewhatis\fP` and `\fSmarkdown\fP` commands
when using action `\fSmanpage\fP`
.TP
DEFAULT_SYNC_SERVER DEFAULT_SYNC_ENV
default distant server and environment to synchronize when using action `\fSsync\fP`
.TP
DEFAULT_SYNC_RSYNC_OPTIONS
default options to use with the `\fSrysnc\fP` command when using action `\fSsync\fP`
.TP
DEFAULT_VERSIONTAG_BRANCH
default branch name to use to create tags when using action `\fSversion-tag\fP`
.TP
DEFAULT_VERSIONTAG_HOOK
path of the hook filename when using action `\fSversion-tag\fP`
.SH FILES
.TP
\fBdevtools.sh\fP  |  \fBdevtools\fP
The library source file ; this is the script name to call in command line ; it can be
stored anywhere in the file system ; its relevant place could be `\fS$HOME/bin\fP` for a user
or, for a global installation, in a place like `\fS/usr/local/bin\fP` (be sure to put it in
a directory included in the global `\fS$PATH\fP`).
.TP
\fBdevtools.conf\fP
The global script configuration file ; this file is required and will be searched in
the same directory as the script above, then in current user `\fS$HOME\fP`, then in system
configurations `\fS/etc\fP`.
.TP
\fBdevtools-actions/\fP  |  \fBdevtools-[action]\fP
This directory contains the actions currently available ; the directory and its contents
are required to use script's actions ; they will be searched in the same directory as
the script above, then in current user `\fS$HOME\fP`.
When it is installed globally, each action is stored as a `\fSdevtools-action\fP` binary file
in the same directory as the global script.
.TP
\fB.devtools_globals\fP
This is the specific dotfile to use for "user" configuration ; you may write your
configuration following the global `\fSdevtools.conf\fP` rules ; this file is searched at the
root directory of user's `\fS$HOME\fP` and is loaded first.
.TP
\fB.devtools\fP
This is the specific dotfile to use for "per project" configuration ; you may write your
configuration following the global `\fSdevtools.conf\fP` rules ; this file is searched at the
root directory of each project (defined by the '-p' option) and is loaded last.
.TP
\fBbash-library/\fP
This directory embeds the required third-party <Bash Library>.
If you already have a version of the library installed in your system, you can over-write
the library loaded (and skip the embedded version) re-defining the `\fSDEFAULT_BASHLIBRARY_PATH\fP`
of the global configuration file.
.SH EXAMPLES

.PP
A "classic" usage of the script would be:
.RS

.EX
devtools action -p ../relative/path/to/concerned/project
.EE
.RE

.PP
To get an help string, run:
.RS

.EX
devtools -h OR devtools action -h OR devtools help action
.EE
.RE

.PP
To make a dry run before really executing the actions, use:
.RS

.EX
devtools action --dry-run ...
.EE
.RE

.SH LICENSE

.PP
The library is licensed under GPL-3.0 - Copyleft (c) Les Ateliers Pierrot
<http://www.ateliers-pierrot.fr/> - Some rights reserved. For documentation,
sources & updates, see <http://github.com/atelierspierrot/devtools>. 
To read GPL-3.0 license conditions, see <http://www.gnu.org/licenses/gpl-3.0.html>.

.SH BUGS

.PP
To transmit bugs, see <http://github.com/atelierspierrot/devtools/issues>.

.SH AUTHOR

.PP
\fBLes Ateliers Pierrot\fP <http://www.ateliers-pierrot.fr/>.

.SH SEE ALSO

.PP
bash-library(3)

